2020/9/1
九月了，每晚应该早早睡觉。今天完成一下小程序？vue？任意吧。
spring-JdbcTemplate:


spring事务的操作：
    事务添加到JavaEE三层架构的service层上

  Spring事务管理API：
        提供了一个接口，代表事务管理器，这个接口针对不同的框架提供了不同的实现类。
  在spring进行事务管理操作：
    声明式事务管理：
        基于注解方式：
            1、在spring配置文件中配置事务管理器
            2、在spring配置文件开启事务注解
                在spring配置文件引入名称空间tx
                开启事务注解：
            3、在service类上面加上事务注解
                @Transactional,这个注解添加到类上，也可以添加到方法上
                类上：该类所有方法都开启事务
                方法上：该方法开启注解

        声明式事务管理参数配置：
            @Transactional(参数):
                propagation:事务传播行为
                    多事务方法直接进行调用，这个过程中事务是如何进行调用管理的
                        七大传播行为:
                            例：@Transactional(propagatipn = Propagation.REQUIRED)

                isolation:事务隔离级别
                    事务有一个特性称为隔离性，多事务操作之间不会产生影响。不考虑隔离性会产生很多问题
                    三个读问题：
                         脏读：
                            一个未提交的事务读取到了另一个未提交事务的数据
                         不可重复读：
                            一个为提交的事务读取到另一个提交事务修改的数据
                         幻（虚）读：
                            一个为提交的事务读取到另一提交事务添加的数据
                    通过设置隔离级别解决三个问题
                         例：例：@Transactional(propagatipn = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)
                timeout:超时时间
                    事务需要在一定时间内进行提交，如果不提交就进行回滚
                    spring中默认值是-1（不超时），设置时以秒为单位
                    例：@Transactional(Timeout = -1 ,propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)

                readOnly:是否只读
                    读：查询操作， 写：添加修改操作
                    readOnly默认值为false，表示可以查询，可以添加修改删除操作
                    例：@Transactional(ReadOnly = false, Timeout = -1 ,propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)

                rollbackFor:回滚
                    设置出现哪些异常进行事务回滚

                noRollbackFor:不回滚
                    设置出现哪些异常不进行事务回滚

        基于xml配置文件方式：
            1、配置事务管理器
            2、配置通知
            3、配置切入点和切面

    编程式事务管理：



2020/8/31
中午吃饭，你忘记给别人带勺子。只有给自己一个人带，很不友善；切记不可再犯。


希望自己可以坚持下去，毕竟在路上风景不一定美。
其实有时候想想以后都觉得可怕。
暂定每周最少三道吧。

Aop:
底层使用动态代理，

第一种有接口情况，JDK动态代理。
创建接口实现类代理对象，增强类方法。

第二种：
CGLIB动态代理，创建子类的代理对象，增强类方法。

AOP术语：
    连接点：类里面哪些方法可以被增强，这些方法称为连接点。

    切入点：实际被增强的方法，称为切入点。

    通知：实际增强的逻辑部分称为通知。

            * 前置通知
            * 后置通知
            * 环绕通知
            * 异常通知
            * 最终通知

    切面：是一个动作的操作，把通知应用到切入点的过程

AOP的操作：
    Spring框架中一般基于AspectJ实现Aop操作
        *AspectJ是一个独立的AOP框架。

    基于AspectJ实现Aop擦做
        1.xml方式：
        2.注解方式

    切入点表达式：
        语法结构：
            execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))

            举例：
                对com.xihua.dao.BookDao 类里面的add方法进行增强；
                execution(* com.xihua.dao.BookDao.add(..));

                对com.xihua.dao.BookDao 类里面的所有方法进行增强；
                execution(* com.xihua.dao.BookDao.*(..));

                对com.xihua.dao包里的所有类里面的所有方法进行增强；
                execution(* com.xihua.dao.*.*(..));