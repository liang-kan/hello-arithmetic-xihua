2020/10/20
反射：
    Java反射机制提供的功能：
        在运行时判断任意一个对象所属的类
        在运行时构造任意一个类的对象
        在运行时判断任意一个类所具有的成员变量和方法
        在运行是获取泛型信息
        在运行时调用任意一个对象的成员变量和方法
        在运行时处理注解
        生成动态代理




2020/9/7
如果晚上可以十一点前睡，就可以七点起床，早上可以安排半个小时的读英语时间。nice



2020/9/2
我怕我又觉得我行了。最近晚上总做梦。

阿里3w月薪的要求
数据平台基础建设、实时和离线大数据研发平台、分布式任务调度和监控、交互式查询引擎、在线查询服务引擎（日均100亿调用）、算法研发平台等。
职位描述：
1、软件工程理论基础扎实，熟悉分布式服务理论基础。有软件分层概念，熟悉设计模式及原则。
2、精通任一主流编程语言(Java/python/scala/go)，有良好的编程习惯。
3、精通SOA架构和微服务架构。4、熟悉Linux和Shell编程。
有以下经验者优先：
1、有大型分布式、高并发、高负载、高可用性系统设计和稳定性经验；
2、有微服务相关项目经验，对Ser *** /FaaS相关技术有较深了解；
3、熟悉OLAP，有海量数据即席查询系统设计和研发经验；
4、对Hadoop生态比较熟悉或者有数据挖掘算法经验或者有上云经验更佳；


今天完成spring剩余部分吧：
日志：
    日志级别以及优先级排序：OFF > FATAL > ERROR > WARN >INFO > DEBUG > TRACE > ALL
    Configuration后面的status用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，可以看到log4j2内部各种详细输出
    先定义所有的appender
    输出日志信息到控制台
    控制日志输出的格式
    然后定义logger，只有定义了logger并引入了appender，appender才会生效
    root：用于指定项目的跟日志，如果没有单独指定Logger，则会使用root作为默认的日志输出

spring5新功能
    框架核心容器支持@Nullable注解
        可以使用在方法，属性，参数，表示方法，属性，参数值可以为空。
    核心容器支持函数式风格
    针对测试方面完成了些改进，整合了JUnit5
SpringWebFlux
    用于web开发，功能与springmvc相似，但是是使用当前比较流行的响应式编程出现的框架。是一种异步非阻塞的框架，Servlet3.1以上才支持。
    核心是基于Reactor的相关API实现的。
    特点：
        非阻塞式
            在不扩充硬件资源情况下，提高吞吐量和伸缩性，以Reactor为基础实现的响应式编程。
        函数式编程
            基于Java8，WebFlux使用Java8函数式编程方式实现路由请求

响应式编程
    响应式编程时一种面向数据流和变化传播的编程范式。这意味着可以在编程语言中很方便地表达静态或者动态的数据流，
    而相关的计算模型会自动将变化的值通过数据流进行传播。电子表格程序就是响应式编程的一个例子。

    Java8提供了观察者模式的两个类：Observer 和 Observable

Reactor实现的响应式编程
    Reactor是满足Reactive规范框架
    Reactor有两个核心类，Mono和Flux，这两个类实现接口Rublisher，提供丰富操作符。Flux对象实现发布者，返回N个元素；Mono实现发布者，返回0或1个元素。
    Flux和Mono都是数据流的发布者，使用Flux和Mono都可以发出三种数据信号：
        元素值
        错误信号
        完成信号
            错误信号和完成信号都代表终止信号，终止信号用于告诉定于这数据流结束了，
            错误信号终止数据流同时把错误信息传递给订阅者

    WebFlux执行流程和核心API
    基于注解编程模型
    基于函数式编程模型


2020/9/1
九月了，每晚应该早早睡觉。今天完成一下小程序？vue？任意吧。
spring-JdbcTemplate:


spring事务的操作：
    事务添加到JavaEE三层架构的service层上

  Spring事务管理API：
        提供了一个接口，代表事务管理器，这个接口针对不同的框架提供了不同的实现类。
  在spring进行事务管理操作：
    声明式事务管理：
        基于注解方式：
            1、在spring配置文件中配置事务管理器
            2、在spring配置文件开启事务注解
                在spring配置文件引入名称空间tx
                开启事务注解：
            3、在service类上面加上事务注解
                @Transactional,这个注解添加到类上，也可以添加到方法上
                类上：该类所有方法都开启事务
                方法上：该方法开启注解

        声明式事务管理参数配置：
            @Transactional(参数):
                propagation:事务传播行为
                    多事务方法直接进行调用，这个过程中事务是如何进行调用管理的
                        七大传播行为:
                            例：@Transactional(propagatipn = Propagation.REQUIRED)

                isolation:事务隔离级别
                    事务有一个特性称为隔离性，多事务操作之间不会产生影响。不考虑隔离性会产生很多问题
                    三个读问题：
                         脏读：
                            一个未提交的事务读取到了另一个未提交事务的数据
                         不可重复读：
                            一个为提交的事务读取到另一个提交事务修改的数据
                         幻（虚）读：
                            一个为提交的事务读取到另一提交事务添加的数据
                    通过设置隔离级别解决三个问题
                         例：例：@Transactional(propagatipn = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)
                timeout:超时时间
                    事务需要在一定时间内进行提交，如果不提交就进行回滚
                    spring中默认值是-1（不超时），设置时以秒为单位
                    例：@Transactional(Timeout = -1 ,propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)

                readOnly:是否只读
                    读：查询操作， 写：添加修改操作
                    readOnly默认值为false，表示可以查询，可以添加修改删除操作
                    例：@Transactional(ReadOnly = false, Timeout = -1 ,propagation = Propagation.REQUIRED,isolation = Isolation.REPEATABLE_READ)

                rollbackFor:回滚
                    设置出现哪些异常进行事务回滚

                noRollbackFor:不回滚
                    设置出现哪些异常不进行事务回滚

        基于xml配置文件方式：
            1、配置事务管理器
            2、配置通知
            3、配置切入点和切面

    编程式事务管理：



2020/8/31
中午吃饭，你忘记给别人带勺子。只有给自己一个人带，很不友善；切记不可再犯。


希望自己可以坚持下去，毕竟在路上风景不一定美。
其实有时候想想以后都觉得可怕。
暂定每周最少三道吧。

Aop:
底层使用动态代理，

第一种有接口情况，JDK动态代理。
创建接口实现类代理对象，增强类方法。

第二种：
CGLIB动态代理，创建子类的代理对象，增强类方法。

AOP术语：
    连接点：类里面哪些方法可以被增强，这些方法称为连接点。

    切入点：实际被增强的方法，称为切入点。

    通知：实际增强的逻辑部分称为通知。

            * 前置通知
            * 后置通知
            * 环绕通知
            * 异常通知
            * 最终通知

    切面：是一个动作的操作，把通知应用到切入点的过程

AOP的操作：
    Spring框架中一般基于AspectJ实现Aop操作
        *AspectJ是一个独立的AOP框架。

    基于AspectJ实现Aop擦做
        1.xml方式：
        2.注解方式

    切入点表达式：
        语法结构：
            execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))

            举例：
                对com.xihua.dao.BookDao 类里面的add方法进行增强；
                execution(* com.xihua.dao.BookDao.add(..));

                对com.xihua.dao.BookDao 类里面的所有方法进行增强；
                execution(* com.xihua.dao.BookDao.*(..));

                对com.xihua.dao包里的所有类里面的所有方法进行增强；
                execution(* com.xihua.dao.*.*(..));